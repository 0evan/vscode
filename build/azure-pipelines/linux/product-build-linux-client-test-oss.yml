parameters:
  - name: VSCODE_PUBLISH
    type: boolean
  - name: VSCODE_QUALITY
    type: string
  - name: VSCODE_RUN_UNIT_TESTS
    type: boolean
  - name: VSCODE_RUN_INTEGRATION_TESTS
    type: boolean
  - name: VSCODE_RUN_SMOKE_TESTS
    type: boolean

steps:
  - checkout: self
    fetchDepth: 1
    retryCountOnTaskFailure: 3

  - task: NodeTool@0
    inputs:
      versionSpec: "16.x"

  - script: |
      set -e
      # Start X server
      /etc/init.d/xvfb start
      # Start dbus session
      DBUS_LAUNCH_RESULT=$(sudo dbus-daemon --config-file=/usr/share/dbus-1/system.conf --print-address)
      echo "##vso[task.setvariable variable=DBUS_SESSION_BUS_ADDRESS]$DBUS_LAUNCH_RESULT"
    displayName: Setup system services

  - script: |
      mkdir -p .build
      node build/azure-pipelines/common/computeNodeModulesCacheKey.js $VSCODE_ARCH $ENABLE_TERRAPIN > .build/yarnlockhash
    displayName: Prepare yarn cache flags

  - task: Cache@2
    inputs:
      key: "nodeModules | $(Agent.OS) | .build/yarnlockhash"
      path: .build/node_modules_cache
      cacheHitVar: NODE_MODULES_RESTORED
    displayName: Restore node_modules cache

  - script: |
      set -e
      tar -xzf .build/node_modules_cache/cache.tgz
    condition: and(succeeded(), eq(variables.NODE_MODULES_RESTORED, 'true'))
    displayName: Extract node_modules cache

  - script: |
      set -e
      npx https://aka.ms/enablesecurefeed standAlone
    timeoutInMinutes: 5
    retryCountOnTaskFailure: 3
    condition: and(succeeded(), ne(variables.NODE_MODULES_RESTORED, 'true'), eq(variables['ENABLE_TERRAPIN'], 'true'))
    displayName: Switch to Terrapin packages

  - script: |
      set -e
      node build/npm/setupBuildYarnrc
      for i in {1..3}; do # try 3 times, for Terrapin
        yarn --cwd build --frozen-lockfile --check-files && break
        if [ $i -eq 3 ]; then
          echo "Yarn failed too many times" >&2
          exit 1
        fi
        echo "Yarn failed $i, trying again..."
      done
    displayName: Install build dependencies

  - script: |
      set -e
      if [ "$NPM_ARCH" = "armv7l" ]; then
        # There is no target_arch="armv7l" supported by node_gyp,
        # arm versions for compilation are decided based on the CC
        # macros.
        # Mapping value is based on
        # https://github.com/nodejs/node/blob/0903515e126c2697042d6546c6aa4b72e1a4b33e/configure.py#L49-L50
        export npm_config_arch="arm"
      else
        export npm_config_arch=$(NPM_ARCH)
      fi

      if [ -z "$CC" ] || [ -z "$CXX" ]; then
        # Download clang based on chromium revision used by vscode
        curl -s https://raw.githubusercontent.com/chromium/chromium/98.0.4758.109/tools/clang/scripts/update.py | python - --output-dir=$PWD/.build/CR_Clang --host-os=linux
        # Download libcxx headers and objects from upstream electron releases
        DEBUG=libcxx-fetcher \
        VSCODE_LIBCXX_OBJECTS_DIR=$PWD/.build/libcxx-objects \
        VSCODE_LIBCXX_HEADERS_DIR=$PWD/.build/libcxx_headers  \
        VSCODE_LIBCXXABI_HEADERS_DIR=$PWD/.build/libcxxabi_headers \
        VSCODE_ARCH="$(NPM_ARCH)" \
        node build/linux/libcxx-fetcher.js
        # Set compiler toolchain
        # Flags for the client build are based on
        # https://source.chromium.org/chromium/chromium/src/+/refs/tags/98.0.4758.109:build/config/arm.gni
        # https://source.chromium.org/chromium/chromium/src/+/refs/tags/98.0.4758.109:build/config/compiler/BUILD.gn
        # https://source.chromium.org/chromium/chromium/src/+/refs/tags/98.0.4758.109:build/config/c++/BUILD.gn
        export CC=$PWD/.build/CR_Clang/bin/clang
        export CXX=$PWD/.build/CR_Clang/bin/clang++
        export CXXFLAGS="-nostdinc++ -D__NO_INLINE__ -isystem$PWD/.build/libcxx_headers -isystem$PWD/.build/libcxx_headers/include -isystem$PWD/.build/libcxxabi_headers/include -fPIC -flto=thin -fsplit-lto-unit"
        export LDFLAGS="-stdlib=libc++ -fuse-ld=lld -flto=thin -L$PWD/.build/libcxx-objects -lc++abi -Wl,--lto-O0"
        export VSCODE_REMOTE_CC=$(which gcc)
        export VSCODE_REMOTE_CXX=$(which g++)
      fi

      for i in {1..3}; do # try 3 times, for Terrapin
        yarn --frozen-lockfile --check-files && break
        if [ $i -eq 3 ]; then
          echo "Yarn failed too many times" >&2
          exit 1
        fi
        echo "Yarn failed $i, trying again..."
      done
    env:
      ELECTRON_SKIP_BINARY_DOWNLOAD: 1
      PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
      GITHUB_TOKEN: "$(github-distro-mixin-password)"
    displayName: Install dependencies
    condition: and(succeeded(), ne(variables.NODE_MODULES_RESTORED, 'true'))

  - script: |
      set -e
      node build/azure-pipelines/common/listNodeModules.js .build/node_modules_list.txt
      mkdir -p .build/node_modules_cache
      tar -czf .build/node_modules_cache/cache.tgz --files-from .build/node_modules_list.txt
    condition: and(succeeded(), ne(variables.NODE_MODULES_RESTORED, 'true'))
    displayName: Create node_modules archive

  - script: |
      set -e
      VSCODE_MIXIN_PASSWORD="$(github-distro-mixin-password)" \
        yarn gulp "transpile-client" "transpile-extensions"
    displayName: Transpile

  - script: |
      set -e
      VSCODE_MIXIN_PASSWORD="$(github-distro-mixin-password)" \
        yarn npm-run-all -lp "electron $(VSCODE_ARCH)" "playwright-install"
    displayName: Download Electron and Playwright

  - script: |
      set -e
      APP_ROOT=$(agent.builddirectory)/VSCode-linux-$(VSCODE_ARCH)
      ELECTRON_ROOT=.build/electron
      sudo chown root $APP_ROOT/chrome-sandbox
      sudo chown root $ELECTRON_ROOT/chrome-sandbox
      sudo chmod 4755 $APP_ROOT/chrome-sandbox
      sudo chmod 4755 $ELECTRON_ROOT/chrome-sandbox
      stat $APP_ROOT/chrome-sandbox
      stat $ELECTRON_ROOT/chrome-sandbox
    displayName: Change setuid helper binary permission

  - ${{ if eq(parameters.VSCODE_RUN_UNIT_TESTS, true) }}:
    - script: |
        set -e
        ./scripts/test.sh --tfs "Unit Tests"
      displayName: Run unit tests (Electron)
      timeoutInMinutes: 15

    - script: |
        set -e
        yarn test-node --build
      displayName: Run unit tests (node.js)
      timeoutInMinutes: 15

    - script: |
        set -e
        DEBUG=*browser* yarn test-browser-no-install --browser chromium --tfs "Browser Unit Tests"
      displayName: Run unit tests (Browser, Chromium)
      timeoutInMinutes: 15

  - ${{ if eq(parameters.VSCODE_RUN_INTEGRATION_TESTS, true) }}:
    - script: |
        set -e
        yarn gulp \
          compile-extension:configuration-editing \
          compile-extension:css-language-features-server \
          compile-extension:emmet \
          compile-extension:git \
          compile-extension:github-authentication \
          compile-extension:html-language-features-server \
          compile-extension:ipynb \
          compile-extension:json-language-features-server \
          compile-extension:markdown-language-features \
          compile-extension-media \
          compile-extension:microsoft-authentication \
          compile-extension:typescript-language-features \
          compile-extension:vscode-api-tests \
          compile-extension:vscode-colorize-tests \
          compile-extension:vscode-custom-editor-tests \
          compile-extension:vscode-notebook-tests \
          compile-extension:vscode-test-resolver
      displayName: Build integration tests

    - script: |
        set -e
        ./scripts/test-integration.sh --tfs "Integration Tests"
      displayName: Run integration tests (Electron)
      timeoutInMinutes: 20

  - ${{ if eq(parameters.VSCODE_RUN_SMOKE_TESTS, true) }}:
    - script: |
        set -e
        yarn --cwd test/smoke compile
        yarn --cwd test/integration/browser compile
      displayName: Compile smoke tests

    - script: |
        set -e
        ps -ef
        cat /proc/sys/fs/inotify/max_user_watches
        lsof | wc -l
      displayName: Diagnostics before smoke test run (processes, max_user_watches, number of opened file handles)
      continueOnError: true
      condition: succeededOrFailed()

    - script: |
        set -e
        yarn smoketest-no-compile --tracing
      timeoutInMinutes: 20
      displayName: Run smoke tests (Electron)
